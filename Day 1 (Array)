Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

SOLUTION--------
Approach-
One brute force approach is to consider every pair of elements and check if their sum equals the target.
This can be done using nested loops, where the outer loop iterates from the first element to the second-to-last element,
and the inner loop iterates from the next element to the last element. However, this approach has a time complexity of O(n^2)

CODE--->
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n =nums.length;
        for(int i =0; i<n; i++){
            for (int j=i+1;j<n;j++){
                if(nums[i]+nums[j]==target){
                    return new int []{i,j};
                }
            }
        }

        return new int []{};
    }
}

Question -2----->
26. Remove Duplicates from Sorted Array

Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each 
unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.

Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:

Change the array nums such that the first k elements of nums contain the unique elements in the order they
were present in nums initially. The remaining elements of nums are not important as well as the size of nums.

Solution --?>
Explanation:
The code starts iterating from i = 1 because we need to compare each element with its previous element to check for duplicates.

The main logic is inside the for loop:

If the current element nums[i] is not equal to the previous element nums[i - 1], it means we have encountered a new unique element.
In that case, we update nums[j] with the value of the unique element at nums[i], and then increment j by 1 to mark the next position for a new unique element.
By doing this, we effectively overwrite any duplicates in the array and only keep the unique elements.
Once the loop finishes, the value of j represents the length of the resulting array with duplicates removed.

Finally, we return j as the desired result.

code------>
class Solution {
    public int removeDuplicates(int[] nums) {
        int n = nums.length;
        int j =1;
        for(int i =1; i<n; i++){
            if(nums[i]!=nums[i-1]){
                nums[j]=nums[i];
                j++;
            }

        }
        return j;
        
    }
}
